C51 COMPILER V9.60.7.0   FOCCONTROL                                                        04/03/2024 13:54:56 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FOCCONTROL
OBJECT MODULE PLACED IN .\Output\FocControl.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Source\Function\FocControl.c LARGE OMF2 WARNINGLEVEL(0) OPTIMIZE
                    -(5,SPEED) BROWSE INCDIR(..\Library\FU68xx_Hardware_Driver\Include;..\User\Include) DEBUG PRINT(.\Listing\FocControl.lst)
                    - TABS(2) OBJECT(.\Output\FocControl.obj)

line level    source

   1          /**************************** (C) COPYRIGHT 2017 Fortiortech shenzhen *****************************
   2          * File Name          : FocControl.c
   3          * Author             : Fortiortech  Appliction Team
   4          * Version            : V1.0
   5          * Date               : 2017-12-26
   6          * Description        : This file contains all the foc control framework used for Motor Control.
   7          ***************************************************************************************************
   8          * All Rights Reserved
   9          **************************************************************************************************/
  10          
  11          
  12          /* Includes -------------------------------------------------------------------------------------*/
  13          #include <FU68xx_2.h>
  14          #include <Myproject.h>
  15          
  16          /* Private variables ----------------------------------------------------------------------------*/
  17          MotStaType mcState;
  18          MotStaM    McStaSet;
  19          
  20          uint16 TimeCnt;
  21          
  22          /*---------------------------------------------------------------------------*/
  23          /* Name     :   void MC_Control(void)
  24          /* Input    :   NO
  25          /* Output   :   NO
  26          /* Description: µç»ú×´Ì¬»úº¯Êý£¬°üÀ¨³õÊ¼»¯¡¢Ô¤³äµç¡¢Ë³·çÄæ·çÅÐ¶Ï¡¢Ô¤¶¨Î»¡¢Æô¶¯¡¢ÔËÐÐ¡¢¹ÊÕÏµÈ
  27          /*---------------------------------------------------------------------------*/
  28          void MC_Control(void)
  29          {
  30   1        switch(mcState)
  31   1        {
  32   2          case mcReady:    // ¹Ø±ÕÊä³ö,ÉÏµç»á¶ÔµçÁ÷½øÐÐ²É¼¯Ð£×¼,µ±²ÉÑùÐ£×¼½áÊø±êÖ¾ÖÃ1ÇÒÆô¶¯Ö¸ÁîÖÃ1ºó£¬²ÅÌø×ªµ½mc
             -Init
  33   2            Motor_Ready();
  34   2            if((mcCurOffset.OffsetFlag == 1) && (mcSpeedRamp.FlagONOFF == 1) && (mcFocCtrl.State_Count == 0))
  35   2            {
  36   3                mcState       = mcInit;
  37   3                FOC_EFREQACC  = 0;
  38   3                FOC_EFREQMIN  = 0;
  39   3                FOC_EFREQHOLD = 0;
  40   3            }
  41   2          break;
  42   2      
  43   2          case mcInit:                                       // ³õÊ¼»¯×´Ì¬£¬½øÈëmcCharge×´Ì¬
  44   2            Motor_Init();
  45   2            mcState               =  mcCharge;               // ÌøÈëmcCharge×´Ì¬
  46   2            mcFocCtrl.State_Count = Charge_Time;
  47   2          break;
  48   2      
  49   2          case mcCharge:                                     // Ô¤³äµç×´Ì¬£¬MCUÊä³ö¹Ì¶¨ÆµÂÊÕ¼¿Õ±È£¬Ô¤³äµç½áÊøºó£
             -¬ÌøÈëmcTailWind
  50   2            Motor_Charge();
  51   2            #if (IPMState == NormalRun)                      // Õý³£°´µç»ú×´Ì¬»úÔËÐÐ
C51 COMPILER V9.60.7.0   FOCCONTROL                                                        04/03/2024 13:54:56 PAGE 2   

  52   2              if( mcFocCtrl.State_Count == 0)
  53   2              {
  54   3                  MOE                   = 0;                 // ¹Ø±ÕÊä³ö
  55   3                  mcState               = mcTailWind;
  56   3                  mcFocCtrl.State_Count = 0;
  57   3              }
  58   2            #endif
  59   2          break;
  60   2      
  61   2          case mcTailWind:
  62   2            #if (TailWind_Mode == NoTailWind)               // ÎÞË³Äæ·ç´¦ÀíµÄ£¬Ö±½ÓÌøÈëÏÂÒ»¸ö×´Ì¬
  63   2              mcState                           = mcPosiCheck;
  64   2              McStaSet.SetFlag.PosiCheckSetFlag = 0;
  65   2              mcFocCtrl.mcPosCheckAngle         = 0xffff;   // ½Ç¶È¸³³õÖµ
  66   2      
  67   2            #elif (TailWind_Mode == TailWind)
                      Motor_TailWind();
              
                    #endif
  71   2          break;
  72   2      
  73   2          case mcPosiCheck:
  74   2            #if (PosCheckEnable==0)                         //³õÊ¼Î»ÖÃ¼ì²â²»Ê¹ÄÜÊ±³õÊ¼½Ç¶ÈÎªÔ¤¶¨Î»½Ç¶È
  75   2              mcFocCtrl.mcPosCheckAngle = Align_Angle;
  76   2              mcState = mcAlign;
  77   2              mcFocCtrl.State_Count = Align_Time;
  78   2          
  79   2      //      FOC_Init();
  80   2      //       /*Ê¹ÄÜÊä³ö*/
  81   2      //      DRV_CMR |= 0x3F;                         // U¡¢V¡¢WÏàÊä³ö
  82   2      //      MOE = 1;
  83   2      //      mcState = mcStart;                       //²»¼ÓÔ¤¶¨Î»¿ªÕâÀï
  84   2      
  85   2            #else
                      RPD();
              
                    #endif
  89   2          break;
  90   2      
  91   2          case mcAlign:       // Ô¤¶¨Î»Ê±¼ä½áÊøºó£¬Ö±½ÓÆô¶¯; AlignTestMode=1ÓÃÓÚ³õÊ¼Î»ÖÃ¼ì²âµ÷ÊÔÓÃ
  92   2            Motor_Align();
  93   2      
  94   2            #if (AlignTestMode==1)
                        while(1);
              
                    #else
  98   2                if(mcFocCtrl.State_Count == 0)
  99   2                {
 100   3                  mcState = mcStart;
 101   3                }
 102   2            #endif
 103   2          break;
 104   2      
 105   2          case mcStart:                           // ÅäÖÃµç»úÆô¶¯²ÎÊý£¬½øÈëmcRun×´Ì¬¡£
 106   2            Motor_Open();
 107   2          break;
 108   2      
 109   2          case mcPllTect:                           // ÅäÖÃµç»úÆô¶¯²ÎÊý£¬½øÈëmcRun×´Ì¬¡£
 110   2            #if (EstimateAlgorithm == PLL)
                        Motor_PllStart();
                    #endif
 113   2          break;
C51 COMPILER V9.60.7.0   FOCCONTROL                                                        04/03/2024 13:54:56 PAGE 3   

 114   2      
 115   2          case mcRun:                             // ÔËÐÐ×´Ì¬£¬ÈôÔËÐÐ×´Ì¬µÄ¸ø¶¨±äÎª0£¬½øÈëmcStop×´Ì¬¡£
 116   2            if(mcSpeedRamp.FlagONOFF == 0)
 117   2            {
 118   3                mcState   = mcStop;
 119   3                mcFocCtrl.State_Count = 200;
 120   3                FOC_IQREF = 0;
 121   3              
 122   3                MOE       = 0;
 123   3                ClrBit(DRV_CR, FOCEN);  //¹Ø±ÕFOC
 124   3                FOC_CR1   = 0x00;
 125   3            }
 126   2          break;
 127   2      
 128   2          case mcStop:
 129   2              #if (StopBrakeFlag == 0)
                      {
                          FOC_CR1 = 0x00;
                          /*¹Ø±ÕFOC*/
                          ClrBit(DRV_CR, FOCEN);
                
                          mcState = mcReady;
                      }
                      #else
 138   2              {
 139   3                  if(mcFocCtrl.State_Count==0) //ÑÓÊ±É²³µ£¬ÕâÀï¸ü¸ÄÓÃÀ´ÅÜ¸ßËÙµç»úÆôÍ£
 140   3                  {
 141   4                      MOE      = 0;
 142   4                      FOC_CR1  = 0x00;
 143   4                      ClrBit(DRV_CR, FOCEN);
 144   4                      DRV_DR   = DRV_ARR*1;
 145   4                      DRV_CMR &= 0xFFC0;
 146   4                      DRV_CMR |= 0x015;                                                // ÈýÏàÏÂÇÅ±ÛÍ¨£¬É²³µ
 147   4                      ClrBit(DRV_CR, OCS);                                             // OCS = 0, DRV_COMR;OCS 
             -= 1, FOC/SVPWM/SPWM
 148   4                      MOE      = 1;
 149   4                      mcState  = mcBrake;
 150   4                      mcFocCtrl.State_Count = 400;//StopWaitTime;
 151   4                  }
 152   3              }
 153   2              #endif
 154   2          break;
 155   2      
 156   2          case mcBrake:
 157   2            if(mcFocCtrl.State_Count == 0)
 158   2            {
 159   3              MOE=0;
 160   3              ClrBit(DRV_CR, FOCEN);
 161   3              mcState = mcReady;
 162   3            }
 163   2          break;
 164   2      
 165   2          case mcFault:
 166   2          break;
 167   2        }
 168   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    416    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
C51 COMPILER V9.60.7.0   FOCCONTROL                                                        04/03/2024 13:54:56 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
