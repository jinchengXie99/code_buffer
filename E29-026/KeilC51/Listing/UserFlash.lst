C51 COMPILER V9.60.7.0   USERFLASH                                                         04/03/2024 13:18:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE USERFLASH
OBJECT MODULE PLACED IN .\Output\UserFlash.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\User\Source\UserFiles\UserFlash.c LARGE OMF2 WARNINGLEVEL(0) OPTIMIZE
                    -(5,SPEED) BROWSE INCDIR(..\Library\FU68xx_Hardware_Driver\Include;..\User\Include) DEBUG PRINT(.\Listing\UserFlash.lst) 
                    -TABS(2) OBJECT(.\Output\UserFlash.obj)

line level    source

   1          /**************************** (C) COPYRIGHT 2015 Fortiortech shenzhen *****************************
   2          * File Name          : Main.c
   3          * Author             : Andrew Kong Fortiortech  Market Dept
   4          * Version            : V1.0
   5          * Date               : 11/09/2015
   6          * Description        : This file contains all the common data types used for
   7          *                      Motor Control.
   8          ***************************************************************************************************
   9          * All Rights Reserved
  10          **************************************************************************************************/
  11          
  12          /*Include ---------------------------------------------------------------------------------------*/
  13          #include <FU68xx_2.h>
  14          #include <Myproject.h>
  15          #include <Customer_Debug.h>
  16          
  17          #include <UserGlobal.h>
  18          #include <UserDefine.h>
  19          
  20          #define  USER_FALSH_ADDRESS 0X3E00             // 15616
  21          
  22          extern uint8 Flash_Sector_Erase(uint8 xdata *FlashAddress);
  23          extern uint8 Flash_Sector_Write(uint8 xdata *FlashAddress, uint8 FlashData);
  24          
  25          extern u8  PowerLose;
  26          
  27          // UserDryer.c
  28          extern u8  idata SpeedShiftStep;
  29          extern u8  idata SpeedCmdLv;
  30          
  31          extern u8  idata HeatShiftStep;
  32          extern u8  idata HeatCmdLv;
  33          
  34          extern u8  idata CoolCmdLv;
  35          extern u8  idata CoolShiftLv;
  36          
  37          extern bit TestMode;
  38          
  39          //----------------------------------------------------------------------------//
  40          // 说明：用户操作flash
  41          // 启动时读取存档，获得启动时的挡位指令，低4位是风速挡，高4位是热度挡
  42          //u8  FaultCode=0;
  43          //u8  FaultLine[8];
  44          u8  FaultOffset;
  45          u8  FlashInitFlag;
  46          
  47          u8  FlashReadLine[4];
  48          
  49          u8  FlashPieceNum;
  50          u8  FlashAddrOffset;
  51          u8  FlashSaveFlag;
  52          u16 FlashWriteTimes;
  53          
C51 COMPILER V9.60.7.0   USERFLASH                                                         04/03/2024 13:18:12 PAGE 2   

  54          //----------------------------------------------------------------------------//
  55          // 说明：用户数据组写入存储区
  56          void FlashWriteData(void)
  57          {
  58   1        // 每4byte为一组，其中第一个byte写入0xA5，第四个byte写入本次高低档，第二三byte预留
  59   1        Flash_Sector_Write(USER_FALSH_ADDRESS+FlashAddrOffset+0,(uint8)0xA5);
  60   1        _nop_();
  61   1        Flash_Sector_Write(USER_FALSH_ADDRESS+FlashAddrOffset+1,(uint8)SpeedShiftStep);
  62   1        _nop_();
  63   1        Flash_Sector_Write(USER_FALSH_ADDRESS+FlashAddrOffset+2,(uint8)HeatShiftStep);
  64   1        _nop_();
  65   1        Flash_Sector_Write(USER_FALSH_ADDRESS+FlashAddrOffset+3,(uint8)CoolShiftLv);
  66   1        _nop_();
  67   1      }
  68          
  69          //----------------------------------------------------------------------------//
  70          // 说明：擦除用户数据区，并写入前2个存储组
  71          void FlashEarseAndWrite(void)
  72          {
  73   1        // 擦除此存储区间
  74   1        Flash_Sector_Erase(USER_FALSH_ADDRESS);
  75   1        
  76   1        // 基地址设置标志0xA5，表明已写入数据
  77   1        Flash_Sector_Write(USER_FALSH_ADDRESS+0,(uint8)0xA5 );
  78   1        Flash_Sector_Write(USER_FALSH_ADDRESS+1,(uint8)0x5A );
  79   1      
  80   1        // 基地址偏移16位，记录擦除次数，次数为16位数据
  81   1        Flash_Sector_Write(USER_FALSH_ADDRESS+2,(uint8)FlashWriteTimes);
  82   1        Flash_Sector_Write(USER_FALSH_ADDRESS+3,(uint8)(FlashWriteTimes>>8));
  83   1      
  84   1        // 每4byte为一组，其中第一个byte写入0xA5，第二三四个byte写入本次数据
  85   1        Flash_Sector_Write(USER_FALSH_ADDRESS+4,(uint8)0xA5 );
  86   1        Flash_Sector_Write(USER_FALSH_ADDRESS+5,(uint8)SpeedShiftStep);
  87   1        Flash_Sector_Write(USER_FALSH_ADDRESS+6,(uint8)HeatShiftStep);
  88   1        Flash_Sector_Write(USER_FALSH_ADDRESS+7,(uint8)CoolShiftLv);
  89   1      
  90   1      //    //bool TempEA;
  91   1      //    //TempEA = EA;
  92   1      //    EA = 0;
  93   1      
  94   1      //    FLA_CR = 0x03;                  //使能自擦除
  95   1      //    FLA_KEY = 0x5a;
  96   1      //    FLA_KEY = 0x1f;                 //flash预编程解锁
  97   1      //    _nop_();
  98   1      //    
  99   1      //    //写数据
 100   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+0) = 0xA5;
 101   1      //    _nop_();
 102   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+1) = 0x5A;
 103   1      //    _nop_();
 104   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+2) = (uint8)FlashWriteTimes;
 105   1      //    _nop_();
 106   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+3) = (uint8)(FlashWriteTimes>>8);
 107   1      //    _nop_();
 108   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+4) = 0xA5;
 109   1      //    _nop_();
 110   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+5) = (uint8)SpeedShiftStep;
 111   1      //    _nop_();
 112   1      //    *(uint8 xdata *)(USER_FALSH_ADDRESS+6) = (uint8)HeatShiftStep;
 113   1      //    _nop_();
 114   1      ////    *(uint8 xdata *)(USER_FALSH_ADDRESS+7) = (uint8)CoolShiftLv);
 115   1      ////    _nop_();
C51 COMPILER V9.60.7.0   USERFLASH                                                         04/03/2024 13:18:12 PAGE 3   

 116   1      //    
 117   1      //    FLA_CR = 0x08;                  //开始预编程，完成后Flash再次上锁
 118   1      //    //EA = TempEA;
 119   1      
 120   1      }
 121          //----------------------------------------------------------------------------//
 122          // 说明：Flash处理，上电即执行一次，后每1ms执行
 123          void DryerFlashInit(void)
 124          {
 125   1        u8 i;
 126   1      
 127   1        EA = 0;
 128   1            
 129   1        // 上电后读取Flash
 130   1        if(FlashInitFlag == 0)
 131   1        {
 132   2          FlashInitFlag = 1;
 133   2          
 134   2          // 读取前4byte
 135   2          for(i=0;i<4;i++)
 136   2            FlashReadLine[i] = *(uint8 code *)(USER_FALSH_ADDRESS + i);
 137   2          
 138   2          // 如第一个字节非0xA5,表明未设置过参数
 139   2          if(FlashReadLine[0] != 0xA5)
 140   2          {
 141   3            FlashWriteTimes = 1;                // 首次擦写
 142   3            
 143   3            DryerKeysDefault();                 // 
 144   3            
 145   3            FlashEarseAndWrite();               // 擦写
 146   3      
 147   3            FlashPieceNum = 2;                  // flash预备区编号
 148   3            FlashAddrOffset = 8;                // flash预备区偏移首地址
 149   3          }
 150   2          // 否则,表明已设置过参数，
 151   2          else
 152   2          {
 153   3            // 搜索最后一个已存储数据的数组
 154   3            FlashPieceNum = 1;                  // 
 155   3            for(i=1;i<=30;i++)
 156   3            {
 157   4              if((*(uint8 code *)(USER_FALSH_ADDRESS + i*4)) == 0xA5)
 158   4                FlashPieceNum=i;
 159   4            }
 160   3            
 161   3            // 计算上次存储组首地址偏移量
 162   3            FlashAddrOffset = FlashPieceNum*4;
 163   3            // 读取擦写次数并加一次
 164   3            FlashWriteTimes = FlashReadLine[2] + (FlashReadLine[3]<<8);
 165   3            
 166   3            // 读取开机挡
 167   3            SpeedShiftStep = *(uint8 code *)(USER_FALSH_ADDRESS + FlashAddrOffset + 1);
 168   3            HeatShiftStep = *(uint8 code *)(USER_FALSH_ADDRESS + FlashAddrOffset + 2);
 169   3            CoolShiftLv = *(uint8 code *)(USER_FALSH_ADDRESS + FlashAddrOffset + 3);
 170   3            
 171   3            // 若此区块写满，为便于下次存储，应将此区域擦除，开始新一轮flash操作，并记录擦写次数
 172   3            if(FlashPieceNum >= 30)        // 此处是 >=
 173   3            {
 174   4              FlashWriteTimes += 1;       // 擦写次数递增
 175   4              
 176   4              FlashEarseAndWrite();       // 擦写
 177   4              
C51 COMPILER V9.60.7.0   USERFLASH                                                         04/03/2024 13:18:12 PAGE 4   

 178   4              FlashPieceNum = 2;          // 更改待写入数组的存储区编号
 179   4              FlashAddrOffset = 8;        // 更改待写入数组的存储区偏移首地址
 180   4            }
 181   3            // 区块未写满，计算待操作区块的编号及首地址，用以下次写入
 182   3            else
 183   3            {
 184   4              FlashPieceNum += 1;
 185   4              FlashAddrOffset += 4;
 186   4            }
 187   3          }
 188   2        }
 189   1        
 190   1        //EA = 1;
 191   1      }
 192          
 193          //----------------------------------------------------------------------------//
 194          // 说明：Flash处理，每1ms执行
 195          void FlashLoopPro(void)
 196          {
 197   1        // 1 当供电异常，保存数据
 198   1        if(PowerLose == 1)
 199   1        {
 200   2          if(mcState == mcReady)
 201   2          {
 202   3            if(FlashSaveFlag == 0)
 203   3            {
 204   4              FlashSaveFlag = 1;
 205   4            }
 206   3          }
 207   2        }
 208   1      
 209   1        // 2 存储标志置位，执行flash存储
 210   1        if(FlashSaveFlag == 1)
 211   1        {
 212   2          FlashSaveFlag = 2;
 213   2          if(TestMode == 0)
 214   2          {
 215   3      //    FlashWriteData();
 216   3          EA = 0;
 217   3          if(FlashPieceNum > 30)           // 此处是 >=
 218   3          {
 219   4            FlashWriteTimes += 1;         // 擦写次数递增
 220   4            
 221   4            FlashEarseAndWrite();         // 擦写
 222   4            
 223   4            FlashPieceNum = 2;            // 更改待写入数组的存储区编号
 224   4            FlashAddrOffset = 8;          // 更改待写入数组的存储区偏移首地址
 225   4          }
 226   3          // 区块未写满，计算待操作区块的编号及首地址，用以下次写入
 227   3          else
 228   3          {
 229   4            FlashWriteData();
 230   4            
 231   4            FlashPieceNum += 1;
 232   4            FlashAddrOffset += 4;
 233   4          }
 234   3          EA = 1;
 235   3          }
 236   2        }
 237   1        
 238   1        // 若掉电时数据存储完毕，但未完全关闭时供电又恢复，此时需重新执行Flash初始化
 239   1        if(FlashSaveFlag == 2)
C51 COMPILER V9.60.7.0   USERFLASH                                                         04/03/2024 13:18:12 PAGE 5   

 240   1        {
 241   2          if(PowerLose == 0)
 242   2          {
 243   3            FlashSaveFlag = 0;
 244   3            if(TestMode == 1)
 245   3            {
 246   4              SpeedShiftStep = 1;
 247   4              SpeedCmdLv = 1;
 248   4              
 249   4              HeatShiftStep = 1;
 250   4              HeatCmdLv = 1;
 251   4              
 252   4              CoolShiftLv = 0;
 253   4              CoolCmdLv = 0;
 254   4            }
 255   3          }
 256   2        }
 257   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    588    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
